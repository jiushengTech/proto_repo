// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: detect/detect.proto

package detect

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Detect_CreateDetect_FullMethodName = "/api.detect.Detect/CreateDetect"
	Detect_UpdateDetect_FullMethodName = "/api.detect.Detect/UpdateDetect"
	Detect_DeleteDetect_FullMethodName = "/api.detect.Detect/DeleteDetect"
	Detect_GetDetect_FullMethodName    = "/api.detect.Detect/GetDetect"
	Detect_ListDetect_FullMethodName   = "/api.detect.Detect/ListDetect"
	Detect_AIDetection_FullMethodName  = "/api.detect.Detect/AIDetection"
)

// DetectClient is the client API for Detect service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DetectClient interface {
	CreateDetect(ctx context.Context, in *CreateDetectRequest, opts ...grpc.CallOption) (*CreateDetectReply, error)
	UpdateDetect(ctx context.Context, in *UpdateDetectRequest, opts ...grpc.CallOption) (*UpdateDetectReply, error)
	DeleteDetect(ctx context.Context, in *DeleteDetectRequest, opts ...grpc.CallOption) (*DeleteDetectReply, error)
	GetDetect(ctx context.Context, in *GetDetectRequest, opts ...grpc.CallOption) (*GetDetectReply, error)
	ListDetect(ctx context.Context, in *ListDetectRequest, opts ...grpc.CallOption) (*ListDetectReply, error)
	AIDetection(ctx context.Context, in *DetectionRequest, opts ...grpc.CallOption) (*DetectionReply, error)
}

type detectClient struct {
	cc grpc.ClientConnInterface
}

func NewDetectClient(cc grpc.ClientConnInterface) DetectClient {
	return &detectClient{cc}
}

func (c *detectClient) CreateDetect(ctx context.Context, in *CreateDetectRequest, opts ...grpc.CallOption) (*CreateDetectReply, error) {
	out := new(CreateDetectReply)
	err := c.cc.Invoke(ctx, Detect_CreateDetect_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *detectClient) UpdateDetect(ctx context.Context, in *UpdateDetectRequest, opts ...grpc.CallOption) (*UpdateDetectReply, error) {
	out := new(UpdateDetectReply)
	err := c.cc.Invoke(ctx, Detect_UpdateDetect_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *detectClient) DeleteDetect(ctx context.Context, in *DeleteDetectRequest, opts ...grpc.CallOption) (*DeleteDetectReply, error) {
	out := new(DeleteDetectReply)
	err := c.cc.Invoke(ctx, Detect_DeleteDetect_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *detectClient) GetDetect(ctx context.Context, in *GetDetectRequest, opts ...grpc.CallOption) (*GetDetectReply, error) {
	out := new(GetDetectReply)
	err := c.cc.Invoke(ctx, Detect_GetDetect_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *detectClient) ListDetect(ctx context.Context, in *ListDetectRequest, opts ...grpc.CallOption) (*ListDetectReply, error) {
	out := new(ListDetectReply)
	err := c.cc.Invoke(ctx, Detect_ListDetect_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *detectClient) AIDetection(ctx context.Context, in *DetectionRequest, opts ...grpc.CallOption) (*DetectionReply, error) {
	out := new(DetectionReply)
	err := c.cc.Invoke(ctx, Detect_AIDetection_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DetectServer is the server API for Detect service.
// All implementations must embed UnimplementedDetectServer
// for forward compatibility
type DetectServer interface {
	CreateDetect(context.Context, *CreateDetectRequest) (*CreateDetectReply, error)
	UpdateDetect(context.Context, *UpdateDetectRequest) (*UpdateDetectReply, error)
	DeleteDetect(context.Context, *DeleteDetectRequest) (*DeleteDetectReply, error)
	GetDetect(context.Context, *GetDetectRequest) (*GetDetectReply, error)
	ListDetect(context.Context, *ListDetectRequest) (*ListDetectReply, error)
	AIDetection(context.Context, *DetectionRequest) (*DetectionReply, error)
	mustEmbedUnimplementedDetectServer()
}

// UnimplementedDetectServer must be embedded to have forward compatible implementations.
type UnimplementedDetectServer struct {
}

func (UnimplementedDetectServer) CreateDetect(context.Context, *CreateDetectRequest) (*CreateDetectReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDetect not implemented")
}
func (UnimplementedDetectServer) UpdateDetect(context.Context, *UpdateDetectRequest) (*UpdateDetectReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDetect not implemented")
}
func (UnimplementedDetectServer) DeleteDetect(context.Context, *DeleteDetectRequest) (*DeleteDetectReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDetect not implemented")
}
func (UnimplementedDetectServer) GetDetect(context.Context, *GetDetectRequest) (*GetDetectReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDetect not implemented")
}
func (UnimplementedDetectServer) ListDetect(context.Context, *ListDetectRequest) (*ListDetectReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDetect not implemented")
}
func (UnimplementedDetectServer) AIDetection(context.Context, *DetectionRequest) (*DetectionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AIDetection not implemented")
}
func (UnimplementedDetectServer) mustEmbedUnimplementedDetectServer() {}

// UnsafeDetectServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DetectServer will
// result in compilation errors.
type UnsafeDetectServer interface {
	mustEmbedUnimplementedDetectServer()
}

func RegisterDetectServer(s grpc.ServiceRegistrar, srv DetectServer) {
	s.RegisterService(&Detect_ServiceDesc, srv)
}

func _Detect_CreateDetect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDetectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DetectServer).CreateDetect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Detect_CreateDetect_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DetectServer).CreateDetect(ctx, req.(*CreateDetectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Detect_UpdateDetect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDetectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DetectServer).UpdateDetect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Detect_UpdateDetect_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DetectServer).UpdateDetect(ctx, req.(*UpdateDetectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Detect_DeleteDetect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDetectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DetectServer).DeleteDetect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Detect_DeleteDetect_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DetectServer).DeleteDetect(ctx, req.(*DeleteDetectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Detect_GetDetect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDetectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DetectServer).GetDetect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Detect_GetDetect_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DetectServer).GetDetect(ctx, req.(*GetDetectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Detect_ListDetect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDetectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DetectServer).ListDetect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Detect_ListDetect_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DetectServer).ListDetect(ctx, req.(*ListDetectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Detect_AIDetection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DetectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DetectServer).AIDetection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Detect_AIDetection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DetectServer).AIDetection(ctx, req.(*DetectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Detect_ServiceDesc is the grpc.ServiceDesc for Detect service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Detect_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.detect.Detect",
	HandlerType: (*DetectServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDetect",
			Handler:    _Detect_CreateDetect_Handler,
		},
		{
			MethodName: "UpdateDetect",
			Handler:    _Detect_UpdateDetect_Handler,
		},
		{
			MethodName: "DeleteDetect",
			Handler:    _Detect_DeleteDetect_Handler,
		},
		{
			MethodName: "GetDetect",
			Handler:    _Detect_GetDetect_Handler,
		},
		{
			MethodName: "ListDetect",
			Handler:    _Detect_ListDetect_Handler,
		},
		{
			MethodName: "AIDetection",
			Handler:    _Detect_AIDetection_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "detect/detect.proto",
}
