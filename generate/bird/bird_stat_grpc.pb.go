// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: bird/bird_stat.proto

package bird

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BirdStat_DeleteBirdStat_FullMethodName             = "/api.bird.BirdStat/DeleteBirdStat"
	BirdStat_ListBirdStatFromCamera_FullMethodName     = "/api.bird.BirdStat/ListBirdStatFromCamera"
	BirdStat_ListBirdStatFromVoicePrint_FullMethodName = "/api.bird.BirdStat/ListBirdStatFromVoicePrint"
)

// BirdStatClient is the client API for BirdStat service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BirdStatClient interface {
	DeleteBirdStat(ctx context.Context, in *DeleteBirdStatRequest, opts ...grpc.CallOption) (*DeleteBirdStatReply, error)
	ListBirdStatFromCamera(ctx context.Context, in *ListBirdStatFromCameraRequest, opts ...grpc.CallOption) (*ListBirdStatFromCameraReply, error)
	ListBirdStatFromVoicePrint(ctx context.Context, in *ListBirdStatFromVoicePrintRequest, opts ...grpc.CallOption) (*ListBirdStatFromVoicePrintReply, error)
}

type birdStatClient struct {
	cc grpc.ClientConnInterface
}

func NewBirdStatClient(cc grpc.ClientConnInterface) BirdStatClient {
	return &birdStatClient{cc}
}

func (c *birdStatClient) DeleteBirdStat(ctx context.Context, in *DeleteBirdStatRequest, opts ...grpc.CallOption) (*DeleteBirdStatReply, error) {
	out := new(DeleteBirdStatReply)
	err := c.cc.Invoke(ctx, BirdStat_DeleteBirdStat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *birdStatClient) ListBirdStatFromCamera(ctx context.Context, in *ListBirdStatFromCameraRequest, opts ...grpc.CallOption) (*ListBirdStatFromCameraReply, error) {
	out := new(ListBirdStatFromCameraReply)
	err := c.cc.Invoke(ctx, BirdStat_ListBirdStatFromCamera_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *birdStatClient) ListBirdStatFromVoicePrint(ctx context.Context, in *ListBirdStatFromVoicePrintRequest, opts ...grpc.CallOption) (*ListBirdStatFromVoicePrintReply, error) {
	out := new(ListBirdStatFromVoicePrintReply)
	err := c.cc.Invoke(ctx, BirdStat_ListBirdStatFromVoicePrint_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BirdStatServer is the server API for BirdStat service.
// All implementations must embed UnimplementedBirdStatServer
// for forward compatibility
type BirdStatServer interface {
	DeleteBirdStat(context.Context, *DeleteBirdStatRequest) (*DeleteBirdStatReply, error)
	ListBirdStatFromCamera(context.Context, *ListBirdStatFromCameraRequest) (*ListBirdStatFromCameraReply, error)
	ListBirdStatFromVoicePrint(context.Context, *ListBirdStatFromVoicePrintRequest) (*ListBirdStatFromVoicePrintReply, error)
	mustEmbedUnimplementedBirdStatServer()
}

// UnimplementedBirdStatServer must be embedded to have forward compatible implementations.
type UnimplementedBirdStatServer struct {
}

func (UnimplementedBirdStatServer) DeleteBirdStat(context.Context, *DeleteBirdStatRequest) (*DeleteBirdStatReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBirdStat not implemented")
}
func (UnimplementedBirdStatServer) ListBirdStatFromCamera(context.Context, *ListBirdStatFromCameraRequest) (*ListBirdStatFromCameraReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBirdStatFromCamera not implemented")
}
func (UnimplementedBirdStatServer) ListBirdStatFromVoicePrint(context.Context, *ListBirdStatFromVoicePrintRequest) (*ListBirdStatFromVoicePrintReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBirdStatFromVoicePrint not implemented")
}
func (UnimplementedBirdStatServer) mustEmbedUnimplementedBirdStatServer() {}

// UnsafeBirdStatServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BirdStatServer will
// result in compilation errors.
type UnsafeBirdStatServer interface {
	mustEmbedUnimplementedBirdStatServer()
}

func RegisterBirdStatServer(s grpc.ServiceRegistrar, srv BirdStatServer) {
	s.RegisterService(&BirdStat_ServiceDesc, srv)
}

func _BirdStat_DeleteBirdStat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBirdStatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BirdStatServer).DeleteBirdStat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BirdStat_DeleteBirdStat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BirdStatServer).DeleteBirdStat(ctx, req.(*DeleteBirdStatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BirdStat_ListBirdStatFromCamera_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBirdStatFromCameraRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BirdStatServer).ListBirdStatFromCamera(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BirdStat_ListBirdStatFromCamera_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BirdStatServer).ListBirdStatFromCamera(ctx, req.(*ListBirdStatFromCameraRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BirdStat_ListBirdStatFromVoicePrint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBirdStatFromVoicePrintRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BirdStatServer).ListBirdStatFromVoicePrint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BirdStat_ListBirdStatFromVoicePrint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BirdStatServer).ListBirdStatFromVoicePrint(ctx, req.(*ListBirdStatFromVoicePrintRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BirdStat_ServiceDesc is the grpc.ServiceDesc for BirdStat service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BirdStat_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.bird.BirdStat",
	HandlerType: (*BirdStatServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeleteBirdStat",
			Handler:    _BirdStat_DeleteBirdStat_Handler,
		},
		{
			MethodName: "ListBirdStatFromCamera",
			Handler:    _BirdStat_ListBirdStatFromCamera_Handler,
		},
		{
			MethodName: "ListBirdStatFromVoicePrint",
			Handler:    _BirdStat_ListBirdStatFromVoicePrint_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bird/bird_stat.proto",
}
