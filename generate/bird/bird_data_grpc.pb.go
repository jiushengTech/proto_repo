// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: bird/bird_data.proto

package bird

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BirdData_ListBirdDynamic_FullMethodName     = "/api.bird.BirdData/ListBirdDynamic"
	BirdData_GetBirdTrack_FullMethodName        = "/api.bird.BirdData/GetBirdTrack"
	BirdData_GetBirdEvolution_FullMethodName    = "/api.bird.BirdData/GetBirdEvolution"
	BirdData_GetBirdDistribution_FullMethodName = "/api.bird.BirdData/GetBirdDistribution"
)

// BirdDataClient is the client API for BirdData service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BirdDataClient interface {
	// 获取鸟类动态
	ListBirdDynamic(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListBirdDynamicReply, error)
	// 获取鸟类轨迹
	GetBirdTrack(ctx context.Context, in *GetBirdTrackRequest, opts ...grpc.CallOption) (BirdData_GetBirdTrackClient, error)
	GetBirdEvolution(ctx context.Context, in *GetBirdEvolutionRequest, opts ...grpc.CallOption) (*GetBirdEvolutionReply, error)
	// 获取鸟类分布
	GetBirdDistribution(ctx context.Context, in *GetBirdDistributionRequest, opts ...grpc.CallOption) (*GetBirdDistributionReply, error)
}

type birdDataClient struct {
	cc grpc.ClientConnInterface
}

func NewBirdDataClient(cc grpc.ClientConnInterface) BirdDataClient {
	return &birdDataClient{cc}
}

func (c *birdDataClient) ListBirdDynamic(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListBirdDynamicReply, error) {
	out := new(ListBirdDynamicReply)
	err := c.cc.Invoke(ctx, BirdData_ListBirdDynamic_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *birdDataClient) GetBirdTrack(ctx context.Context, in *GetBirdTrackRequest, opts ...grpc.CallOption) (BirdData_GetBirdTrackClient, error) {
	stream, err := c.cc.NewStream(ctx, &BirdData_ServiceDesc.Streams[0], BirdData_GetBirdTrack_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &birdDataGetBirdTrackClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BirdData_GetBirdTrackClient interface {
	Recv() (*GetBirdTrackReply, error)
	grpc.ClientStream
}

type birdDataGetBirdTrackClient struct {
	grpc.ClientStream
}

func (x *birdDataGetBirdTrackClient) Recv() (*GetBirdTrackReply, error) {
	m := new(GetBirdTrackReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *birdDataClient) GetBirdEvolution(ctx context.Context, in *GetBirdEvolutionRequest, opts ...grpc.CallOption) (*GetBirdEvolutionReply, error) {
	out := new(GetBirdEvolutionReply)
	err := c.cc.Invoke(ctx, BirdData_GetBirdEvolution_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *birdDataClient) GetBirdDistribution(ctx context.Context, in *GetBirdDistributionRequest, opts ...grpc.CallOption) (*GetBirdDistributionReply, error) {
	out := new(GetBirdDistributionReply)
	err := c.cc.Invoke(ctx, BirdData_GetBirdDistribution_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BirdDataServer is the server API for BirdData service.
// All implementations must embed UnimplementedBirdDataServer
// for forward compatibility
type BirdDataServer interface {
	// 获取鸟类动态
	ListBirdDynamic(context.Context, *emptypb.Empty) (*ListBirdDynamicReply, error)
	// 获取鸟类轨迹
	GetBirdTrack(*GetBirdTrackRequest, BirdData_GetBirdTrackServer) error
	GetBirdEvolution(context.Context, *GetBirdEvolutionRequest) (*GetBirdEvolutionReply, error)
	// 获取鸟类分布
	GetBirdDistribution(context.Context, *GetBirdDistributionRequest) (*GetBirdDistributionReply, error)
	mustEmbedUnimplementedBirdDataServer()
}

// UnimplementedBirdDataServer must be embedded to have forward compatible implementations.
type UnimplementedBirdDataServer struct {
}

func (UnimplementedBirdDataServer) ListBirdDynamic(context.Context, *emptypb.Empty) (*ListBirdDynamicReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBirdDynamic not implemented")
}
func (UnimplementedBirdDataServer) GetBirdTrack(*GetBirdTrackRequest, BirdData_GetBirdTrackServer) error {
	return status.Errorf(codes.Unimplemented, "method GetBirdTrack not implemented")
}
func (UnimplementedBirdDataServer) GetBirdEvolution(context.Context, *GetBirdEvolutionRequest) (*GetBirdEvolutionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBirdEvolution not implemented")
}
func (UnimplementedBirdDataServer) GetBirdDistribution(context.Context, *GetBirdDistributionRequest) (*GetBirdDistributionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBirdDistribution not implemented")
}
func (UnimplementedBirdDataServer) mustEmbedUnimplementedBirdDataServer() {}

// UnsafeBirdDataServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BirdDataServer will
// result in compilation errors.
type UnsafeBirdDataServer interface {
	mustEmbedUnimplementedBirdDataServer()
}

func RegisterBirdDataServer(s grpc.ServiceRegistrar, srv BirdDataServer) {
	s.RegisterService(&BirdData_ServiceDesc, srv)
}

func _BirdData_ListBirdDynamic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BirdDataServer).ListBirdDynamic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BirdData_ListBirdDynamic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BirdDataServer).ListBirdDynamic(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BirdData_GetBirdTrack_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetBirdTrackRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BirdDataServer).GetBirdTrack(m, &birdDataGetBirdTrackServer{stream})
}

type BirdData_GetBirdTrackServer interface {
	Send(*GetBirdTrackReply) error
	grpc.ServerStream
}

type birdDataGetBirdTrackServer struct {
	grpc.ServerStream
}

func (x *birdDataGetBirdTrackServer) Send(m *GetBirdTrackReply) error {
	return x.ServerStream.SendMsg(m)
}

func _BirdData_GetBirdEvolution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBirdEvolutionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BirdDataServer).GetBirdEvolution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BirdData_GetBirdEvolution_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BirdDataServer).GetBirdEvolution(ctx, req.(*GetBirdEvolutionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BirdData_GetBirdDistribution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBirdDistributionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BirdDataServer).GetBirdDistribution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BirdData_GetBirdDistribution_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BirdDataServer).GetBirdDistribution(ctx, req.(*GetBirdDistributionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BirdData_ServiceDesc is the grpc.ServiceDesc for BirdData service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BirdData_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.bird.BirdData",
	HandlerType: (*BirdDataServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListBirdDynamic",
			Handler:    _BirdData_ListBirdDynamic_Handler,
		},
		{
			MethodName: "GetBirdEvolution",
			Handler:    _BirdData_GetBirdEvolution_Handler,
		},
		{
			MethodName: "GetBirdDistribution",
			Handler:    _BirdData_GetBirdDistribution_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetBirdTrack",
			Handler:       _BirdData_GetBirdTrack_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "bird/bird_data.proto",
}
