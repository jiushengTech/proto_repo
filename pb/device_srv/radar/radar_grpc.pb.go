// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: device_srv/radar/radar.proto

package device

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Radar_CreateRadar_FullMethodName    = "/biz.device_srv.radar.Radar/CreateRadar"
	Radar_UpdateRadar_FullMethodName    = "/biz.device_srv.radar.Radar/UpdateRadar"
	Radar_DeleteRadar_FullMethodName    = "/biz.device_srv.radar.Radar/DeleteRadar"
	Radar_ListRadar_FullMethodName      = "/biz.device_srv.radar.Radar/ListRadar"
	Radar_GetRadarStatus_FullMethodName = "/biz.device_srv.radar.Radar/GetRadarStatus"
	Radar_GetRadarTrack_FullMethodName  = "/biz.device_srv.radar.Radar/getRadarTrack"
	Radar_GetRadarPlot_FullMethodName   = "/biz.device_srv.radar.Radar/GetRadarPlot"
)

// RadarClient is the client API for Radar service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RadarClient interface {
	CreateRadar(ctx context.Context, in *CreateRadarRequest, opts ...grpc.CallOption) (*CreateRadarReply, error)
	UpdateRadar(ctx context.Context, in *UpdateRadarRequest, opts ...grpc.CallOption) (*UpdateRadarReply, error)
	DeleteRadar(ctx context.Context, in *DeleteRadarRequest, opts ...grpc.CallOption) (*DeleteRadarReply, error)
	ListRadar(ctx context.Context, in *ListRadarRequest, opts ...grpc.CallOption) (*ListRadarReply, error)
	GetRadarStatus(ctx context.Context, opts ...grpc.CallOption) (Radar_GetRadarStatusClient, error)
	GetRadarTrack(ctx context.Context, opts ...grpc.CallOption) (Radar_GetRadarTrackClient, error)
	GetRadarPlot(ctx context.Context, opts ...grpc.CallOption) (Radar_GetRadarPlotClient, error)
}

type radarClient struct {
	cc grpc.ClientConnInterface
}

func NewRadarClient(cc grpc.ClientConnInterface) RadarClient {
	return &radarClient{cc}
}

func (c *radarClient) CreateRadar(ctx context.Context, in *CreateRadarRequest, opts ...grpc.CallOption) (*CreateRadarReply, error) {
	out := new(CreateRadarReply)
	err := c.cc.Invoke(ctx, Radar_CreateRadar_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *radarClient) UpdateRadar(ctx context.Context, in *UpdateRadarRequest, opts ...grpc.CallOption) (*UpdateRadarReply, error) {
	out := new(UpdateRadarReply)
	err := c.cc.Invoke(ctx, Radar_UpdateRadar_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *radarClient) DeleteRadar(ctx context.Context, in *DeleteRadarRequest, opts ...grpc.CallOption) (*DeleteRadarReply, error) {
	out := new(DeleteRadarReply)
	err := c.cc.Invoke(ctx, Radar_DeleteRadar_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *radarClient) ListRadar(ctx context.Context, in *ListRadarRequest, opts ...grpc.CallOption) (*ListRadarReply, error) {
	out := new(ListRadarReply)
	err := c.cc.Invoke(ctx, Radar_ListRadar_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *radarClient) GetRadarStatus(ctx context.Context, opts ...grpc.CallOption) (Radar_GetRadarStatusClient, error) {
	stream, err := c.cc.NewStream(ctx, &Radar_ServiceDesc.Streams[0], Radar_GetRadarStatus_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &radarGetRadarStatusClient{stream}
	return x, nil
}

type Radar_GetRadarStatusClient interface {
	Send(*GetRadarStatusRequest) error
	Recv() (*GetRadarStatusReply, error)
	grpc.ClientStream
}

type radarGetRadarStatusClient struct {
	grpc.ClientStream
}

func (x *radarGetRadarStatusClient) Send(m *GetRadarStatusRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *radarGetRadarStatusClient) Recv() (*GetRadarStatusReply, error) {
	m := new(GetRadarStatusReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *radarClient) GetRadarTrack(ctx context.Context, opts ...grpc.CallOption) (Radar_GetRadarTrackClient, error) {
	stream, err := c.cc.NewStream(ctx, &Radar_ServiceDesc.Streams[1], Radar_GetRadarTrack_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &radarGetRadarTrackClient{stream}
	return x, nil
}

type Radar_GetRadarTrackClient interface {
	Send(*GetRadarTrackRequest) error
	Recv() (*GetRadarTrackReply, error)
	grpc.ClientStream
}

type radarGetRadarTrackClient struct {
	grpc.ClientStream
}

func (x *radarGetRadarTrackClient) Send(m *GetRadarTrackRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *radarGetRadarTrackClient) Recv() (*GetRadarTrackReply, error) {
	m := new(GetRadarTrackReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *radarClient) GetRadarPlot(ctx context.Context, opts ...grpc.CallOption) (Radar_GetRadarPlotClient, error) {
	stream, err := c.cc.NewStream(ctx, &Radar_ServiceDesc.Streams[2], Radar_GetRadarPlot_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &radarGetRadarPlotClient{stream}
	return x, nil
}

type Radar_GetRadarPlotClient interface {
	Send(*GetRadarPlotRequest) error
	Recv() (*GetRadarPlotReply, error)
	grpc.ClientStream
}

type radarGetRadarPlotClient struct {
	grpc.ClientStream
}

func (x *radarGetRadarPlotClient) Send(m *GetRadarPlotRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *radarGetRadarPlotClient) Recv() (*GetRadarPlotReply, error) {
	m := new(GetRadarPlotReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RadarServer is the server API for Radar service.
// All implementations must embed UnimplementedRadarServer
// for forward compatibility
type RadarServer interface {
	CreateRadar(context.Context, *CreateRadarRequest) (*CreateRadarReply, error)
	UpdateRadar(context.Context, *UpdateRadarRequest) (*UpdateRadarReply, error)
	DeleteRadar(context.Context, *DeleteRadarRequest) (*DeleteRadarReply, error)
	ListRadar(context.Context, *ListRadarRequest) (*ListRadarReply, error)
	GetRadarStatus(Radar_GetRadarStatusServer) error
	GetRadarTrack(Radar_GetRadarTrackServer) error
	GetRadarPlot(Radar_GetRadarPlotServer) error
	mustEmbedUnimplementedRadarServer()
}

// UnimplementedRadarServer must be embedded to have forward compatible implementations.
type UnimplementedRadarServer struct {
}

func (UnimplementedRadarServer) CreateRadar(context.Context, *CreateRadarRequest) (*CreateRadarReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRadar not implemented")
}
func (UnimplementedRadarServer) UpdateRadar(context.Context, *UpdateRadarRequest) (*UpdateRadarReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRadar not implemented")
}
func (UnimplementedRadarServer) DeleteRadar(context.Context, *DeleteRadarRequest) (*DeleteRadarReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRadar not implemented")
}
func (UnimplementedRadarServer) ListRadar(context.Context, *ListRadarRequest) (*ListRadarReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRadar not implemented")
}
func (UnimplementedRadarServer) GetRadarStatus(Radar_GetRadarStatusServer) error {
	return status.Errorf(codes.Unimplemented, "method GetRadarStatus not implemented")
}
func (UnimplementedRadarServer) GetRadarTrack(Radar_GetRadarTrackServer) error {
	return status.Errorf(codes.Unimplemented, "method GetRadarTrack not implemented")
}
func (UnimplementedRadarServer) GetRadarPlot(Radar_GetRadarPlotServer) error {
	return status.Errorf(codes.Unimplemented, "method GetRadarPlot not implemented")
}
func (UnimplementedRadarServer) mustEmbedUnimplementedRadarServer() {}

// UnsafeRadarServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RadarServer will
// result in compilation errors.
type UnsafeRadarServer interface {
	mustEmbedUnimplementedRadarServer()
}

func RegisterRadarServer(s grpc.ServiceRegistrar, srv RadarServer) {
	s.RegisterService(&Radar_ServiceDesc, srv)
}

func _Radar_CreateRadar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRadarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RadarServer).CreateRadar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Radar_CreateRadar_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RadarServer).CreateRadar(ctx, req.(*CreateRadarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Radar_UpdateRadar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRadarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RadarServer).UpdateRadar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Radar_UpdateRadar_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RadarServer).UpdateRadar(ctx, req.(*UpdateRadarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Radar_DeleteRadar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRadarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RadarServer).DeleteRadar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Radar_DeleteRadar_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RadarServer).DeleteRadar(ctx, req.(*DeleteRadarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Radar_ListRadar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRadarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RadarServer).ListRadar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Radar_ListRadar_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RadarServer).ListRadar(ctx, req.(*ListRadarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Radar_GetRadarStatus_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RadarServer).GetRadarStatus(&radarGetRadarStatusServer{stream})
}

type Radar_GetRadarStatusServer interface {
	Send(*GetRadarStatusReply) error
	Recv() (*GetRadarStatusRequest, error)
	grpc.ServerStream
}

type radarGetRadarStatusServer struct {
	grpc.ServerStream
}

func (x *radarGetRadarStatusServer) Send(m *GetRadarStatusReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *radarGetRadarStatusServer) Recv() (*GetRadarStatusRequest, error) {
	m := new(GetRadarStatusRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Radar_GetRadarTrack_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RadarServer).GetRadarTrack(&radarGetRadarTrackServer{stream})
}

type Radar_GetRadarTrackServer interface {
	Send(*GetRadarTrackReply) error
	Recv() (*GetRadarTrackRequest, error)
	grpc.ServerStream
}

type radarGetRadarTrackServer struct {
	grpc.ServerStream
}

func (x *radarGetRadarTrackServer) Send(m *GetRadarTrackReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *radarGetRadarTrackServer) Recv() (*GetRadarTrackRequest, error) {
	m := new(GetRadarTrackRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Radar_GetRadarPlot_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RadarServer).GetRadarPlot(&radarGetRadarPlotServer{stream})
}

type Radar_GetRadarPlotServer interface {
	Send(*GetRadarPlotReply) error
	Recv() (*GetRadarPlotRequest, error)
	grpc.ServerStream
}

type radarGetRadarPlotServer struct {
	grpc.ServerStream
}

func (x *radarGetRadarPlotServer) Send(m *GetRadarPlotReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *radarGetRadarPlotServer) Recv() (*GetRadarPlotRequest, error) {
	m := new(GetRadarPlotRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Radar_ServiceDesc is the grpc.ServiceDesc for Radar service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Radar_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "biz.device_srv.radar.Radar",
	HandlerType: (*RadarServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRadar",
			Handler:    _Radar_CreateRadar_Handler,
		},
		{
			MethodName: "UpdateRadar",
			Handler:    _Radar_UpdateRadar_Handler,
		},
		{
			MethodName: "DeleteRadar",
			Handler:    _Radar_DeleteRadar_Handler,
		},
		{
			MethodName: "ListRadar",
			Handler:    _Radar_ListRadar_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetRadarStatus",
			Handler:       _Radar_GetRadarStatus_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "getRadarTrack",
			Handler:       _Radar_GetRadarTrack_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "GetRadarPlot",
			Handler:       _Radar_GetRadarPlot_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "device_srv/radar/radar.proto",
}
