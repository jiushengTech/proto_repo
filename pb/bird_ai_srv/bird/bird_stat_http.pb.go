// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.2
// - protoc             v4.25.1
// source: bird_ai_srv/bird/bird_stat.proto

package bird

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationBirdStatListBirdStatFromCamera = "/biz.bird_ai_srv.bird.BirdStat/ListBirdStatFromCamera"
const OperationBirdStatListBirdStatFromVoicePrint = "/biz.bird_ai_srv.bird.BirdStat/ListBirdStatFromVoicePrint"

type BirdStatHTTPServer interface {
	ListBirdStatFromCamera(context.Context, *ListBirdStatFromCameraRequest) (*ListBirdStatFromCameraReply, error)
	ListBirdStatFromVoicePrint(context.Context, *ListBirdStatFromVoicePrintRequest) (*ListBirdStatFromVoicePrintReply, error)
}

func RegisterBirdStatHTTPServer(s *http.Server, srv BirdStatHTTPServer) {
	r := s.Route("/")
	r.GET("/yw/bird/stat/camera", _BirdStat_ListBirdStatFromCamera0_HTTP_Handler(srv))
	r.GET("/yw/bird/stat/voiceprint", _BirdStat_ListBirdStatFromVoicePrint0_HTTP_Handler(srv))
}

func _BirdStat_ListBirdStatFromCamera0_HTTP_Handler(srv BirdStatHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListBirdStatFromCameraRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBirdStatListBirdStatFromCamera)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListBirdStatFromCamera(ctx, req.(*ListBirdStatFromCameraRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListBirdStatFromCameraReply)
		return ctx.Result(200, reply)
	}
}

func _BirdStat_ListBirdStatFromVoicePrint0_HTTP_Handler(srv BirdStatHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListBirdStatFromVoicePrintRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBirdStatListBirdStatFromVoicePrint)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListBirdStatFromVoicePrint(ctx, req.(*ListBirdStatFromVoicePrintRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListBirdStatFromVoicePrintReply)
		return ctx.Result(200, reply)
	}
}

type BirdStatHTTPClient interface {
	ListBirdStatFromCamera(ctx context.Context, req *ListBirdStatFromCameraRequest, opts ...http.CallOption) (rsp *ListBirdStatFromCameraReply, err error)
	ListBirdStatFromVoicePrint(ctx context.Context, req *ListBirdStatFromVoicePrintRequest, opts ...http.CallOption) (rsp *ListBirdStatFromVoicePrintReply, err error)
}

type BirdStatHTTPClientImpl struct {
	cc *http.Client
}

func NewBirdStatHTTPClient(client *http.Client) BirdStatHTTPClient {
	return &BirdStatHTTPClientImpl{client}
}

func (c *BirdStatHTTPClientImpl) ListBirdStatFromCamera(ctx context.Context, in *ListBirdStatFromCameraRequest, opts ...http.CallOption) (*ListBirdStatFromCameraReply, error) {
	var out ListBirdStatFromCameraReply
	pattern := "/yw/bird/stat/camera"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBirdStatListBirdStatFromCamera))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BirdStatHTTPClientImpl) ListBirdStatFromVoicePrint(ctx context.Context, in *ListBirdStatFromVoicePrintRequest, opts ...http.CallOption) (*ListBirdStatFromVoicePrintReply, error) {
	var out ListBirdStatFromVoicePrintReply
	pattern := "/yw/bird/stat/voiceprint"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBirdStatListBirdStatFromVoicePrint))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
