// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.2
// - protoc             v4.25.1
// source: bird_ai_srv/bird/bird_type.proto

package bird

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	page "github.com/samsaralc/proto_repo/pb/common/page"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationBirdTypeCreateBirdType = "/biz.bird_ai_srv.bird.BirdType/CreateBirdType"
const OperationBirdTypeListBirdType = "/biz.bird_ai_srv.bird.BirdType/ListBirdType"

type BirdTypeHTTPServer interface {
	CreateBirdType(context.Context, *CreateBirdTypeRequest) (*page.Response, error)
	ListBirdType(context.Context, *ListBirdTypeRequest) (*ListBirdTypeReply, error)
}

func RegisterBirdTypeHTTPServer(s *http.Server, srv BirdTypeHTTPServer) {
	r := s.Route("/")
	r.POST("/yw/bird/type/create", _BirdType_CreateBirdType0_HTTP_Handler(srv))
	r.GET("/yw/bird/type/list", _BirdType_ListBirdType0_HTTP_Handler(srv))
}

func _BirdType_CreateBirdType0_HTTP_Handler(srv BirdTypeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateBirdTypeRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBirdTypeCreateBirdType)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateBirdType(ctx, req.(*CreateBirdTypeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*page.Response)
		return ctx.Result(200, reply)
	}
}

func _BirdType_ListBirdType0_HTTP_Handler(srv BirdTypeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListBirdTypeRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBirdTypeListBirdType)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListBirdType(ctx, req.(*ListBirdTypeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListBirdTypeReply)
		return ctx.Result(200, reply)
	}
}

type BirdTypeHTTPClient interface {
	CreateBirdType(ctx context.Context, req *CreateBirdTypeRequest, opts ...http.CallOption) (rsp *page.Response, err error)
	ListBirdType(ctx context.Context, req *ListBirdTypeRequest, opts ...http.CallOption) (rsp *ListBirdTypeReply, err error)
}

type BirdTypeHTTPClientImpl struct {
	cc *http.Client
}

func NewBirdTypeHTTPClient(client *http.Client) BirdTypeHTTPClient {
	return &BirdTypeHTTPClientImpl{client}
}

func (c *BirdTypeHTTPClientImpl) CreateBirdType(ctx context.Context, in *CreateBirdTypeRequest, opts ...http.CallOption) (*page.Response, error) {
	var out page.Response
	pattern := "/yw/bird/type/create"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBirdTypeCreateBirdType))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BirdTypeHTTPClientImpl) ListBirdType(ctx context.Context, in *ListBirdTypeRequest, opts ...http.CallOption) (*ListBirdTypeReply, error) {
	var out ListBirdTypeReply
	pattern := "/yw/bird/type/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBirdTypeListBirdType))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
