// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.2
// - protoc             v4.25.1
// source: bird_ai_srv/bird/bird_Info.proto

package bird

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationBirdInfoGetBirdDetailById = "/biz.bird_ai_srv.bird.BirdInfo/GetBirdDetailById"
const OperationBirdInfoListBirdBaseByOrder = "/biz.bird_ai_srv.bird.BirdInfo/ListBirdBaseByOrder"
const OperationBirdInfoListBirdOrder = "/biz.bird_ai_srv.bird.BirdInfo/ListBirdOrder"

type BirdInfoHTTPServer interface {
	GetBirdDetailById(context.Context, *GetBirdDetailByIdRequest) (*GetBirdDetailByIdReply, error)
	ListBirdBaseByOrder(context.Context, *ListBirdBaseByOrderRequest) (*ListBirdBaseByOrderReply, error)
	ListBirdOrder(context.Context, *emptypb.Empty) (*ListBirdOrderReply, error)
}

func RegisterBirdInfoHTTPServer(s *http.Server, srv BirdInfoHTTPServer) {
	r := s.Route("/")
	r.GET("yw/bird/getBirdDetail", _BirdInfo_GetBirdDetailById0_HTTP_Handler(srv))
	r.GET("yw/bird/listBirdOrder", _BirdInfo_ListBirdOrder0_HTTP_Handler(srv))
	r.GET("yw/bird/listBaseByOrder", _BirdInfo_ListBirdBaseByOrder0_HTTP_Handler(srv))
}

func _BirdInfo_GetBirdDetailById0_HTTP_Handler(srv BirdInfoHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetBirdDetailByIdRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBirdInfoGetBirdDetailById)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetBirdDetailById(ctx, req.(*GetBirdDetailByIdRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetBirdDetailByIdReply)
		return ctx.Result(200, reply)
	}
}

func _BirdInfo_ListBirdOrder0_HTTP_Handler(srv BirdInfoHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBirdInfoListBirdOrder)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListBirdOrder(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListBirdOrderReply)
		return ctx.Result(200, reply)
	}
}

func _BirdInfo_ListBirdBaseByOrder0_HTTP_Handler(srv BirdInfoHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListBirdBaseByOrderRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBirdInfoListBirdBaseByOrder)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListBirdBaseByOrder(ctx, req.(*ListBirdBaseByOrderRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListBirdBaseByOrderReply)
		return ctx.Result(200, reply)
	}
}

type BirdInfoHTTPClient interface {
	GetBirdDetailById(ctx context.Context, req *GetBirdDetailByIdRequest, opts ...http.CallOption) (rsp *GetBirdDetailByIdReply, err error)
	ListBirdBaseByOrder(ctx context.Context, req *ListBirdBaseByOrderRequest, opts ...http.CallOption) (rsp *ListBirdBaseByOrderReply, err error)
	ListBirdOrder(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *ListBirdOrderReply, err error)
}

type BirdInfoHTTPClientImpl struct {
	cc *http.Client
}

func NewBirdInfoHTTPClient(client *http.Client) BirdInfoHTTPClient {
	return &BirdInfoHTTPClientImpl{client}
}

func (c *BirdInfoHTTPClientImpl) GetBirdDetailById(ctx context.Context, in *GetBirdDetailByIdRequest, opts ...http.CallOption) (*GetBirdDetailByIdReply, error) {
	var out GetBirdDetailByIdReply
	pattern := "yw/bird/getBirdDetail"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBirdInfoGetBirdDetailById))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BirdInfoHTTPClientImpl) ListBirdBaseByOrder(ctx context.Context, in *ListBirdBaseByOrderRequest, opts ...http.CallOption) (*ListBirdBaseByOrderReply, error) {
	var out ListBirdBaseByOrderReply
	pattern := "yw/bird/listBaseByOrder"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBirdInfoListBirdBaseByOrder))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BirdInfoHTTPClientImpl) ListBirdOrder(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*ListBirdOrderReply, error) {
	var out ListBirdOrderReply
	pattern := "yw/bird/listBirdOrder"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBirdInfoListBirdOrder))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
