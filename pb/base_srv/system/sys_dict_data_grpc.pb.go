// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: base_srv/system/sys_dict_data.proto

package system

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SysDictData_CreateSysDictData_FullMethodName = "/biz.base_srv.system.SysDictData/CreateSysDictData"
	SysDictData_UpdateSysDictData_FullMethodName = "/biz.base_srv.system.SysDictData/UpdateSysDictData"
	SysDictData_DeleteSysDictData_FullMethodName = "/biz.base_srv.system.SysDictData/DeleteSysDictData"
	SysDictData_GetSysDictData_FullMethodName    = "/biz.base_srv.system.SysDictData/GetSysDictData"
	SysDictData_ListSysDictData_FullMethodName   = "/biz.base_srv.system.SysDictData/ListSysDictData"
)

// SysDictDataClient is the client API for SysDictData service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SysDictDataClient interface {
	CreateSysDictData(ctx context.Context, in *CreateSysDictDataRequest, opts ...grpc.CallOption) (*CreateSysDictDataReply, error)
	UpdateSysDictData(ctx context.Context, in *UpdateSysDictDataRequest, opts ...grpc.CallOption) (*UpdateSysDictDataReply, error)
	DeleteSysDictData(ctx context.Context, in *DeleteSysDictDataRequest, opts ...grpc.CallOption) (*DeleteSysDictDataReply, error)
	GetSysDictData(ctx context.Context, in *GetSysDictDataRequest, opts ...grpc.CallOption) (*GetSysDictDataReply, error)
	ListSysDictData(ctx context.Context, in *ListSysDictDataRequest, opts ...grpc.CallOption) (*ListSysDictDataReply, error)
}

type sysDictDataClient struct {
	cc grpc.ClientConnInterface
}

func NewSysDictDataClient(cc grpc.ClientConnInterface) SysDictDataClient {
	return &sysDictDataClient{cc}
}

func (c *sysDictDataClient) CreateSysDictData(ctx context.Context, in *CreateSysDictDataRequest, opts ...grpc.CallOption) (*CreateSysDictDataReply, error) {
	out := new(CreateSysDictDataReply)
	err := c.cc.Invoke(ctx, SysDictData_CreateSysDictData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysDictDataClient) UpdateSysDictData(ctx context.Context, in *UpdateSysDictDataRequest, opts ...grpc.CallOption) (*UpdateSysDictDataReply, error) {
	out := new(UpdateSysDictDataReply)
	err := c.cc.Invoke(ctx, SysDictData_UpdateSysDictData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysDictDataClient) DeleteSysDictData(ctx context.Context, in *DeleteSysDictDataRequest, opts ...grpc.CallOption) (*DeleteSysDictDataReply, error) {
	out := new(DeleteSysDictDataReply)
	err := c.cc.Invoke(ctx, SysDictData_DeleteSysDictData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysDictDataClient) GetSysDictData(ctx context.Context, in *GetSysDictDataRequest, opts ...grpc.CallOption) (*GetSysDictDataReply, error) {
	out := new(GetSysDictDataReply)
	err := c.cc.Invoke(ctx, SysDictData_GetSysDictData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysDictDataClient) ListSysDictData(ctx context.Context, in *ListSysDictDataRequest, opts ...grpc.CallOption) (*ListSysDictDataReply, error) {
	out := new(ListSysDictDataReply)
	err := c.cc.Invoke(ctx, SysDictData_ListSysDictData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SysDictDataServer is the server API for SysDictData service.
// All implementations must embed UnimplementedSysDictDataServer
// for forward compatibility
type SysDictDataServer interface {
	CreateSysDictData(context.Context, *CreateSysDictDataRequest) (*CreateSysDictDataReply, error)
	UpdateSysDictData(context.Context, *UpdateSysDictDataRequest) (*UpdateSysDictDataReply, error)
	DeleteSysDictData(context.Context, *DeleteSysDictDataRequest) (*DeleteSysDictDataReply, error)
	GetSysDictData(context.Context, *GetSysDictDataRequest) (*GetSysDictDataReply, error)
	ListSysDictData(context.Context, *ListSysDictDataRequest) (*ListSysDictDataReply, error)
	mustEmbedUnimplementedSysDictDataServer()
}

// UnimplementedSysDictDataServer must be embedded to have forward compatible implementations.
type UnimplementedSysDictDataServer struct {
}

func (UnimplementedSysDictDataServer) CreateSysDictData(context.Context, *CreateSysDictDataRequest) (*CreateSysDictDataReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSysDictData not implemented")
}
func (UnimplementedSysDictDataServer) UpdateSysDictData(context.Context, *UpdateSysDictDataRequest) (*UpdateSysDictDataReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSysDictData not implemented")
}
func (UnimplementedSysDictDataServer) DeleteSysDictData(context.Context, *DeleteSysDictDataRequest) (*DeleteSysDictDataReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSysDictData not implemented")
}
func (UnimplementedSysDictDataServer) GetSysDictData(context.Context, *GetSysDictDataRequest) (*GetSysDictDataReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSysDictData not implemented")
}
func (UnimplementedSysDictDataServer) ListSysDictData(context.Context, *ListSysDictDataRequest) (*ListSysDictDataReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSysDictData not implemented")
}
func (UnimplementedSysDictDataServer) mustEmbedUnimplementedSysDictDataServer() {}

// UnsafeSysDictDataServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SysDictDataServer will
// result in compilation errors.
type UnsafeSysDictDataServer interface {
	mustEmbedUnimplementedSysDictDataServer()
}

func RegisterSysDictDataServer(s grpc.ServiceRegistrar, srv SysDictDataServer) {
	s.RegisterService(&SysDictData_ServiceDesc, srv)
}

func _SysDictData_CreateSysDictData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSysDictDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysDictDataServer).CreateSysDictData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysDictData_CreateSysDictData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysDictDataServer).CreateSysDictData(ctx, req.(*CreateSysDictDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysDictData_UpdateSysDictData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSysDictDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysDictDataServer).UpdateSysDictData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysDictData_UpdateSysDictData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysDictDataServer).UpdateSysDictData(ctx, req.(*UpdateSysDictDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysDictData_DeleteSysDictData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSysDictDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysDictDataServer).DeleteSysDictData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysDictData_DeleteSysDictData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysDictDataServer).DeleteSysDictData(ctx, req.(*DeleteSysDictDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysDictData_GetSysDictData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSysDictDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysDictDataServer).GetSysDictData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysDictData_GetSysDictData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysDictDataServer).GetSysDictData(ctx, req.(*GetSysDictDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysDictData_ListSysDictData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSysDictDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysDictDataServer).ListSysDictData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysDictData_ListSysDictData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysDictDataServer).ListSysDictData(ctx, req.(*ListSysDictDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SysDictData_ServiceDesc is the grpc.ServiceDesc for SysDictData service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SysDictData_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "biz.base_srv.system.SysDictData",
	HandlerType: (*SysDictDataServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSysDictData",
			Handler:    _SysDictData_CreateSysDictData_Handler,
		},
		{
			MethodName: "UpdateSysDictData",
			Handler:    _SysDictData_UpdateSysDictData_Handler,
		},
		{
			MethodName: "DeleteSysDictData",
			Handler:    _SysDictData_DeleteSysDictData_Handler,
		},
		{
			MethodName: "GetSysDictData",
			Handler:    _SysDictData_GetSysDictData_Handler,
		},
		{
			MethodName: "ListSysDictData",
			Handler:    _SysDictData_ListSysDictData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "base_srv/system/sys_dict_data.proto",
}
