// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.2
// - protoc             v4.25.1
// source: base_srv/system/sys_dict_type.proto

package system

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationSysDictTypeCreateSysDictType = "/biz.base_srv.system.SysDictType/CreateSysDictType"
const OperationSysDictTypeDeleteSysDictType = "/biz.base_srv.system.SysDictType/DeleteSysDictType"
const OperationSysDictTypeGetSysDictType = "/biz.base_srv.system.SysDictType/GetSysDictType"
const OperationSysDictTypeListSysDictType = "/biz.base_srv.system.SysDictType/ListSysDictType"
const OperationSysDictTypeUpdateSysDictType = "/biz.base_srv.system.SysDictType/UpdateSysDictType"

type SysDictTypeHTTPServer interface {
	CreateSysDictType(context.Context, *CreateSysDictTypeRequest) (*CreateSysDictTypeReply, error)
	DeleteSysDictType(context.Context, *DeleteSysDictTypeRequest) (*DeleteSysDictTypeReply, error)
	GetSysDictType(context.Context, *GetSysDictTypeRequest) (*GetSysDictTypeReply, error)
	ListSysDictType(context.Context, *ListSysDictTypeRequest) (*ListSysDictTypeReply, error)
	UpdateSysDictType(context.Context, *UpdateSysDictTypeRequest) (*UpdateSysDictTypeReply, error)
}

func RegisterSysDictTypeHTTPServer(s *http.Server, srv SysDictTypeHTTPServer) {
	r := s.Route("/")
	r.POST("yw/system/sys_dict_type", _SysDictType_CreateSysDictType0_HTTP_Handler(srv))
	r.PUT("yw/system/sys_dict_type", _SysDictType_UpdateSysDictType0_HTTP_Handler(srv))
	r.DELETE("yw/system/sys_dict_type/{dictId}", _SysDictType_DeleteSysDictType0_HTTP_Handler(srv))
	r.GET("yw/system/sys_dict_type/{dictId}", _SysDictType_GetSysDictType0_HTTP_Handler(srv))
	r.GET("yw/system/sys_dict_type", _SysDictType_ListSysDictType0_HTTP_Handler(srv))
}

func _SysDictType_CreateSysDictType0_HTTP_Handler(srv SysDictTypeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateSysDictTypeRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSysDictTypeCreateSysDictType)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateSysDictType(ctx, req.(*CreateSysDictTypeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateSysDictTypeReply)
		return ctx.Result(200, reply)
	}
}

func _SysDictType_UpdateSysDictType0_HTTP_Handler(srv SysDictTypeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateSysDictTypeRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSysDictTypeUpdateSysDictType)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateSysDictType(ctx, req.(*UpdateSysDictTypeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateSysDictTypeReply)
		return ctx.Result(200, reply)
	}
}

func _SysDictType_DeleteSysDictType0_HTTP_Handler(srv SysDictTypeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteSysDictTypeRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSysDictTypeDeleteSysDictType)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteSysDictType(ctx, req.(*DeleteSysDictTypeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteSysDictTypeReply)
		return ctx.Result(200, reply)
	}
}

func _SysDictType_GetSysDictType0_HTTP_Handler(srv SysDictTypeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetSysDictTypeRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSysDictTypeGetSysDictType)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetSysDictType(ctx, req.(*GetSysDictTypeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetSysDictTypeReply)
		return ctx.Result(200, reply)
	}
}

func _SysDictType_ListSysDictType0_HTTP_Handler(srv SysDictTypeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListSysDictTypeRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSysDictTypeListSysDictType)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListSysDictType(ctx, req.(*ListSysDictTypeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListSysDictTypeReply)
		return ctx.Result(200, reply)
	}
}

type SysDictTypeHTTPClient interface {
	CreateSysDictType(ctx context.Context, req *CreateSysDictTypeRequest, opts ...http.CallOption) (rsp *CreateSysDictTypeReply, err error)
	DeleteSysDictType(ctx context.Context, req *DeleteSysDictTypeRequest, opts ...http.CallOption) (rsp *DeleteSysDictTypeReply, err error)
	GetSysDictType(ctx context.Context, req *GetSysDictTypeRequest, opts ...http.CallOption) (rsp *GetSysDictTypeReply, err error)
	ListSysDictType(ctx context.Context, req *ListSysDictTypeRequest, opts ...http.CallOption) (rsp *ListSysDictTypeReply, err error)
	UpdateSysDictType(ctx context.Context, req *UpdateSysDictTypeRequest, opts ...http.CallOption) (rsp *UpdateSysDictTypeReply, err error)
}

type SysDictTypeHTTPClientImpl struct {
	cc *http.Client
}

func NewSysDictTypeHTTPClient(client *http.Client) SysDictTypeHTTPClient {
	return &SysDictTypeHTTPClientImpl{client}
}

func (c *SysDictTypeHTTPClientImpl) CreateSysDictType(ctx context.Context, in *CreateSysDictTypeRequest, opts ...http.CallOption) (*CreateSysDictTypeReply, error) {
	var out CreateSysDictTypeReply
	pattern := "yw/system/sys_dict_type"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSysDictTypeCreateSysDictType))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysDictTypeHTTPClientImpl) DeleteSysDictType(ctx context.Context, in *DeleteSysDictTypeRequest, opts ...http.CallOption) (*DeleteSysDictTypeReply, error) {
	var out DeleteSysDictTypeReply
	pattern := "yw/system/sys_dict_type/{dictId}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationSysDictTypeDeleteSysDictType))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysDictTypeHTTPClientImpl) GetSysDictType(ctx context.Context, in *GetSysDictTypeRequest, opts ...http.CallOption) (*GetSysDictTypeReply, error) {
	var out GetSysDictTypeReply
	pattern := "yw/system/sys_dict_type/{dictId}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationSysDictTypeGetSysDictType))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysDictTypeHTTPClientImpl) ListSysDictType(ctx context.Context, in *ListSysDictTypeRequest, opts ...http.CallOption) (*ListSysDictTypeReply, error) {
	var out ListSysDictTypeReply
	pattern := "yw/system/sys_dict_type"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationSysDictTypeListSysDictType))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysDictTypeHTTPClientImpl) UpdateSysDictType(ctx context.Context, in *UpdateSysDictTypeRequest, opts ...http.CallOption) (*UpdateSysDictTypeReply, error) {
	var out UpdateSysDictTypeReply
	pattern := "yw/system/sys_dict_type"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSysDictTypeUpdateSysDictType))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
