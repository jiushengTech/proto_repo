// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: base_srv/system/sys_dict_type.proto

package system

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SysDictType_CreateSysDictType_FullMethodName = "/biz.base_srv.system.SysDictType/CreateSysDictType"
	SysDictType_UpdateSysDictType_FullMethodName = "/biz.base_srv.system.SysDictType/UpdateSysDictType"
	SysDictType_DeleteSysDictType_FullMethodName = "/biz.base_srv.system.SysDictType/DeleteSysDictType"
	SysDictType_GetSysDictType_FullMethodName    = "/biz.base_srv.system.SysDictType/GetSysDictType"
	SysDictType_ListSysDictType_FullMethodName   = "/biz.base_srv.system.SysDictType/ListSysDictType"
)

// SysDictTypeClient is the client API for SysDictType service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SysDictTypeClient interface {
	CreateSysDictType(ctx context.Context, in *CreateSysDictTypeRequest, opts ...grpc.CallOption) (*CreateSysDictTypeReply, error)
	UpdateSysDictType(ctx context.Context, in *UpdateSysDictTypeRequest, opts ...grpc.CallOption) (*UpdateSysDictTypeReply, error)
	DeleteSysDictType(ctx context.Context, in *DeleteSysDictTypeRequest, opts ...grpc.CallOption) (*DeleteSysDictTypeReply, error)
	GetSysDictType(ctx context.Context, in *GetSysDictTypeRequest, opts ...grpc.CallOption) (*GetSysDictTypeReply, error)
	ListSysDictType(ctx context.Context, in *ListSysDictTypeRequest, opts ...grpc.CallOption) (*ListSysDictTypeReply, error)
}

type sysDictTypeClient struct {
	cc grpc.ClientConnInterface
}

func NewSysDictTypeClient(cc grpc.ClientConnInterface) SysDictTypeClient {
	return &sysDictTypeClient{cc}
}

func (c *sysDictTypeClient) CreateSysDictType(ctx context.Context, in *CreateSysDictTypeRequest, opts ...grpc.CallOption) (*CreateSysDictTypeReply, error) {
	out := new(CreateSysDictTypeReply)
	err := c.cc.Invoke(ctx, SysDictType_CreateSysDictType_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysDictTypeClient) UpdateSysDictType(ctx context.Context, in *UpdateSysDictTypeRequest, opts ...grpc.CallOption) (*UpdateSysDictTypeReply, error) {
	out := new(UpdateSysDictTypeReply)
	err := c.cc.Invoke(ctx, SysDictType_UpdateSysDictType_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysDictTypeClient) DeleteSysDictType(ctx context.Context, in *DeleteSysDictTypeRequest, opts ...grpc.CallOption) (*DeleteSysDictTypeReply, error) {
	out := new(DeleteSysDictTypeReply)
	err := c.cc.Invoke(ctx, SysDictType_DeleteSysDictType_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysDictTypeClient) GetSysDictType(ctx context.Context, in *GetSysDictTypeRequest, opts ...grpc.CallOption) (*GetSysDictTypeReply, error) {
	out := new(GetSysDictTypeReply)
	err := c.cc.Invoke(ctx, SysDictType_GetSysDictType_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysDictTypeClient) ListSysDictType(ctx context.Context, in *ListSysDictTypeRequest, opts ...grpc.CallOption) (*ListSysDictTypeReply, error) {
	out := new(ListSysDictTypeReply)
	err := c.cc.Invoke(ctx, SysDictType_ListSysDictType_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SysDictTypeServer is the server API for SysDictType service.
// All implementations must embed UnimplementedSysDictTypeServer
// for forward compatibility
type SysDictTypeServer interface {
	CreateSysDictType(context.Context, *CreateSysDictTypeRequest) (*CreateSysDictTypeReply, error)
	UpdateSysDictType(context.Context, *UpdateSysDictTypeRequest) (*UpdateSysDictTypeReply, error)
	DeleteSysDictType(context.Context, *DeleteSysDictTypeRequest) (*DeleteSysDictTypeReply, error)
	GetSysDictType(context.Context, *GetSysDictTypeRequest) (*GetSysDictTypeReply, error)
	ListSysDictType(context.Context, *ListSysDictTypeRequest) (*ListSysDictTypeReply, error)
	mustEmbedUnimplementedSysDictTypeServer()
}

// UnimplementedSysDictTypeServer must be embedded to have forward compatible implementations.
type UnimplementedSysDictTypeServer struct {
}

func (UnimplementedSysDictTypeServer) CreateSysDictType(context.Context, *CreateSysDictTypeRequest) (*CreateSysDictTypeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSysDictType not implemented")
}
func (UnimplementedSysDictTypeServer) UpdateSysDictType(context.Context, *UpdateSysDictTypeRequest) (*UpdateSysDictTypeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSysDictType not implemented")
}
func (UnimplementedSysDictTypeServer) DeleteSysDictType(context.Context, *DeleteSysDictTypeRequest) (*DeleteSysDictTypeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSysDictType not implemented")
}
func (UnimplementedSysDictTypeServer) GetSysDictType(context.Context, *GetSysDictTypeRequest) (*GetSysDictTypeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSysDictType not implemented")
}
func (UnimplementedSysDictTypeServer) ListSysDictType(context.Context, *ListSysDictTypeRequest) (*ListSysDictTypeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSysDictType not implemented")
}
func (UnimplementedSysDictTypeServer) mustEmbedUnimplementedSysDictTypeServer() {}

// UnsafeSysDictTypeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SysDictTypeServer will
// result in compilation errors.
type UnsafeSysDictTypeServer interface {
	mustEmbedUnimplementedSysDictTypeServer()
}

func RegisterSysDictTypeServer(s grpc.ServiceRegistrar, srv SysDictTypeServer) {
	s.RegisterService(&SysDictType_ServiceDesc, srv)
}

func _SysDictType_CreateSysDictType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSysDictTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysDictTypeServer).CreateSysDictType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysDictType_CreateSysDictType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysDictTypeServer).CreateSysDictType(ctx, req.(*CreateSysDictTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysDictType_UpdateSysDictType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSysDictTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysDictTypeServer).UpdateSysDictType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysDictType_UpdateSysDictType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysDictTypeServer).UpdateSysDictType(ctx, req.(*UpdateSysDictTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysDictType_DeleteSysDictType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSysDictTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysDictTypeServer).DeleteSysDictType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysDictType_DeleteSysDictType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysDictTypeServer).DeleteSysDictType(ctx, req.(*DeleteSysDictTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysDictType_GetSysDictType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSysDictTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysDictTypeServer).GetSysDictType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysDictType_GetSysDictType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysDictTypeServer).GetSysDictType(ctx, req.(*GetSysDictTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysDictType_ListSysDictType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSysDictTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysDictTypeServer).ListSysDictType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysDictType_ListSysDictType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysDictTypeServer).ListSysDictType(ctx, req.(*ListSysDictTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SysDictType_ServiceDesc is the grpc.ServiceDesc for SysDictType service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SysDictType_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "biz.base_srv.system.SysDictType",
	HandlerType: (*SysDictTypeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSysDictType",
			Handler:    _SysDictType_CreateSysDictType_Handler,
		},
		{
			MethodName: "UpdateSysDictType",
			Handler:    _SysDictType_UpdateSysDictType_Handler,
		},
		{
			MethodName: "DeleteSysDictType",
			Handler:    _SysDictType_DeleteSysDictType_Handler,
		},
		{
			MethodName: "GetSysDictType",
			Handler:    _SysDictType_GetSysDictType_Handler,
		},
		{
			MethodName: "ListSysDictType",
			Handler:    _SysDictType_ListSysDictType_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "base_srv/system/sys_dict_type.proto",
}
