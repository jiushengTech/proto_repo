// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.2
// - protoc             v4.25.1
// source: base_srv/system/sys_dict_data.proto

package system

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationSysDictDataCreateSysDictData = "/biz.base_srv.system.SysDictData/CreateSysDictData"
const OperationSysDictDataDeleteSysDictData = "/biz.base_srv.system.SysDictData/DeleteSysDictData"
const OperationSysDictDataGetSysDictData = "/biz.base_srv.system.SysDictData/GetSysDictData"
const OperationSysDictDataListSysDictData = "/biz.base_srv.system.SysDictData/ListSysDictData"
const OperationSysDictDataUpdateSysDictData = "/biz.base_srv.system.SysDictData/UpdateSysDictData"

type SysDictDataHTTPServer interface {
	CreateSysDictData(context.Context, *CreateSysDictDataRequest) (*CreateSysDictDataReply, error)
	DeleteSysDictData(context.Context, *DeleteSysDictDataRequest) (*DeleteSysDictDataReply, error)
	GetSysDictData(context.Context, *GetSysDictDataRequest) (*GetSysDictDataReply, error)
	ListSysDictData(context.Context, *ListSysDictDataRequest) (*ListSysDictDataReply, error)
	UpdateSysDictData(context.Context, *UpdateSysDictDataRequest) (*UpdateSysDictDataReply, error)
}

func RegisterSysDictDataHTTPServer(s *http.Server, srv SysDictDataHTTPServer) {
	r := s.Route("/")
	r.POST("yw/system/sys_dict_data", _SysDictData_CreateSysDictData0_HTTP_Handler(srv))
	r.PUT("yw/system/sys_dict_data", _SysDictData_UpdateSysDictData0_HTTP_Handler(srv))
	r.DELETE("yw/system/sys_dict_data/{dictCode}", _SysDictData_DeleteSysDictData0_HTTP_Handler(srv))
	r.GET("yw/system/sys_dict_data/{dictCode}", _SysDictData_GetSysDictData0_HTTP_Handler(srv))
	r.GET("yw/system/sys_dict_data", _SysDictData_ListSysDictData0_HTTP_Handler(srv))
}

func _SysDictData_CreateSysDictData0_HTTP_Handler(srv SysDictDataHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateSysDictDataRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSysDictDataCreateSysDictData)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateSysDictData(ctx, req.(*CreateSysDictDataRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateSysDictDataReply)
		return ctx.Result(200, reply)
	}
}

func _SysDictData_UpdateSysDictData0_HTTP_Handler(srv SysDictDataHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateSysDictDataRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSysDictDataUpdateSysDictData)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateSysDictData(ctx, req.(*UpdateSysDictDataRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateSysDictDataReply)
		return ctx.Result(200, reply)
	}
}

func _SysDictData_DeleteSysDictData0_HTTP_Handler(srv SysDictDataHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteSysDictDataRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSysDictDataDeleteSysDictData)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteSysDictData(ctx, req.(*DeleteSysDictDataRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteSysDictDataReply)
		return ctx.Result(200, reply)
	}
}

func _SysDictData_GetSysDictData0_HTTP_Handler(srv SysDictDataHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetSysDictDataRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSysDictDataGetSysDictData)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetSysDictData(ctx, req.(*GetSysDictDataRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetSysDictDataReply)
		return ctx.Result(200, reply)
	}
}

func _SysDictData_ListSysDictData0_HTTP_Handler(srv SysDictDataHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListSysDictDataRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSysDictDataListSysDictData)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListSysDictData(ctx, req.(*ListSysDictDataRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListSysDictDataReply)
		return ctx.Result(200, reply)
	}
}

type SysDictDataHTTPClient interface {
	CreateSysDictData(ctx context.Context, req *CreateSysDictDataRequest, opts ...http.CallOption) (rsp *CreateSysDictDataReply, err error)
	DeleteSysDictData(ctx context.Context, req *DeleteSysDictDataRequest, opts ...http.CallOption) (rsp *DeleteSysDictDataReply, err error)
	GetSysDictData(ctx context.Context, req *GetSysDictDataRequest, opts ...http.CallOption) (rsp *GetSysDictDataReply, err error)
	ListSysDictData(ctx context.Context, req *ListSysDictDataRequest, opts ...http.CallOption) (rsp *ListSysDictDataReply, err error)
	UpdateSysDictData(ctx context.Context, req *UpdateSysDictDataRequest, opts ...http.CallOption) (rsp *UpdateSysDictDataReply, err error)
}

type SysDictDataHTTPClientImpl struct {
	cc *http.Client
}

func NewSysDictDataHTTPClient(client *http.Client) SysDictDataHTTPClient {
	return &SysDictDataHTTPClientImpl{client}
}

func (c *SysDictDataHTTPClientImpl) CreateSysDictData(ctx context.Context, in *CreateSysDictDataRequest, opts ...http.CallOption) (*CreateSysDictDataReply, error) {
	var out CreateSysDictDataReply
	pattern := "yw/system/sys_dict_data"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSysDictDataCreateSysDictData))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysDictDataHTTPClientImpl) DeleteSysDictData(ctx context.Context, in *DeleteSysDictDataRequest, opts ...http.CallOption) (*DeleteSysDictDataReply, error) {
	var out DeleteSysDictDataReply
	pattern := "yw/system/sys_dict_data/{dictCode}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationSysDictDataDeleteSysDictData))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysDictDataHTTPClientImpl) GetSysDictData(ctx context.Context, in *GetSysDictDataRequest, opts ...http.CallOption) (*GetSysDictDataReply, error) {
	var out GetSysDictDataReply
	pattern := "yw/system/sys_dict_data/{dictCode}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationSysDictDataGetSysDictData))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysDictDataHTTPClientImpl) ListSysDictData(ctx context.Context, in *ListSysDictDataRequest, opts ...http.CallOption) (*ListSysDictDataReply, error) {
	var out ListSysDictDataReply
	pattern := "yw/system/sys_dict_data"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationSysDictDataListSysDictData))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysDictDataHTTPClientImpl) UpdateSysDictData(ctx context.Context, in *UpdateSysDictDataRequest, opts ...http.CallOption) (*UpdateSysDictDataReply, error) {
	var out UpdateSysDictDataReply
	pattern := "yw/system/sys_dict_data"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSysDictDataUpdateSysDictData))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
